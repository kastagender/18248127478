import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from aiogram.utils import executor
from config import BOT_TOKEN, CHANNEL_ID, REVIEW_LINK, MANAGER_USERNAME, MANAGER_ID, ADMINS, JPY_TO_UAH, USD_MARKUP
from data.database import init_db, save_order

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

user_data = {}
post_log = []
buy_callback = CallbackData("buy", "title", "size")

def escape_md(text):
    return re.sub(r'([_\*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /new09 —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç.")

@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üîÅ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å", callback_data="update_rate"),
        InlineKeyboardButton("üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å", callback_data="show_rate"),
        InlineKeyboardButton("üìã –õ–æ–≥ –ø–æ—Å—Ç–æ–≤", callback_data="show_log")
    )
    await message.answer("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data in ['update_rate', 'show_rate', 'show_log'])
async def admin_callbacks(call: types.CallbackQuery):
    global JPY_TO_UAH
    if call.from_user.id not in ADMINS:
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    if call.data == 'update_rate':
        await call.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫—É—Ä—Å \u00a5 -> UAH:")
        user_data[call.from_user.id] = {'awaiting': 'new_rate'}
    elif call.data == 'show_rate':
        await call.message.answer(f"–ö—É—Ä—Å: 1 \u00a5 = {JPY_TO_UAH}‚Ç¥")
    elif call.data == 'show_log':
        if not post_log:
            await call.message.answer("–õ–æ–≥ –ø—É—Å—Ç.")
        else:
            await call.message.answer('\n\n'.join(post_log[-10:]))

@dp.message_handler(lambda message: user_data.get(message.from_user.id, {}).get('awaiting') == 'new_rate')
async def update_rate_handler(message: types.Message):
    global JPY_TO_UAH
    try:
        rate = float(message.text)
        JPY_TO_UAH = rate
        await message.answer(f"‚úÖ –ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω: 1 \u00a5 = {rate}‚Ç¥")
        user_data.pop(message.from_user.id)
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@dp.message_handler(commands=['new09'])
async def new_post_start(message: types.Message):
    user_data[message.from_user.id] = {'step': 'photo'}
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    data = user_data.get(message.from_user.id)
    if not data or data.get('step') != 'photo':
        return
    user_data[message.from_user.id]['photo'] = message.photo[-1].file_id
    user_data[message.from_user.id]['step'] = 'title'
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –æ–¥–µ–∂–¥—ã:")

@dp.message_handler()
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    data = user_data.get(user_id)

    if not data:
        return

    step = data.get('step')

    if step == 'title':
        data['title'] = message.text
        data['step'] = 'size'
        await message.answer("–†–∞–∑–º–µ—Ä—ã:")

    elif step == 'size':
        data['size'] = message.text
        data['step'] = 'price'
        await message.answer("–¶–µ–Ω–∞ –≤ –π–µ–Ω–∞—Ö:")

    elif step == 'price':
        try:
            price_jpy = int(message.text)
            price_uah_base = price_jpy * JPY_TO_UAH
            price_usd_base = price_uah_base / 40
            price_usd_final = int(price_usd_base + USD_MARKUP)
            price_uah_final = int(price_usd_final * 40)

            title = escape_md(data['title'].upper())
            size = escape_md(data['size'])
            uah = price_uah_final
            usd = price_usd_final

            post_text = (
                f"üî• *{title}* üî•\n\n"
                f"üìè *–†–∞–∑–º–µ—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏:* `{size}`\n"
                f"üí∏ *–¶–µ–Ω–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π:* *{uah}‚Ç¥* / *${usd}*\n\n"
                f"üì¶ _–ü—Ä—è–º–æ –∏–∑ –ö–∏—Ç–∞—è_\n"
                f"‚úÖ _\\ –ö–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª_\n"
                f"üöÄ _–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞_\n"
                f"üí¨ _–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã\\? –ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Å—ë –ø–æ–¥—Å–∫–∞–∂–µ—Ç_\n\n"
                f"üëá *–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑* üëá"
            )

            kb = InlineKeyboardMarkup(row_width=2).add(
                InlineKeyboardButton(
                    "üõí –ö—É–ø–∏—Ç—å",
                    callback_data=buy_callback.new(
                        title=data['title'][:30],
                        size=data['size'][:10]
                    )
                ),
                InlineKeyboardButton("–û—Ç–∑—ã–≤—ã üìù", url=REVIEW_LINK)
            )

            await bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=data['photo'],
                caption=post_text,
                parse_mode="MarkdownV2",
                reply_markup=kb
            )

            await message.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
            save_order(user_id, data['title'], data['size'], price_uah_final)
            post_log.append(post_text)
            user_data.pop(user_id)

        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –π–µ–Ω–∞—Ö —á–∏—Å–ª–æ–º.")

@dp.callback_query_handler(buy_callback.filter())
async def handle_buy_callback(call: types.CallbackQuery, callback_data: dict):
    user = call.from_user
    title = callback_data['title']
    size = callback_data['size']

    msg = (
        f"üõç *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n\n"
        f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: [{user.full_name}](tg://user?id={user.id})\n"
        f"üì¶ –¢–æ–≤–∞—Ä: *{title}*\n"
        f"üìè –†–∞–∑–º–µ—Ä: `{size}`\n"
        f"üïí –í—Ä–µ–º—è: `{call.message.date}`"
    )

    await call.answer("üì® –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É!", show_alert=True)
    await bot.send_message(
        chat_id=MANAGER_ID,
        text=msg,
        parse_mode="Markdown"
    )

if __name__ == "__main__":
    init_db()
    executor.start_polling(dp, skip_updates=True)
